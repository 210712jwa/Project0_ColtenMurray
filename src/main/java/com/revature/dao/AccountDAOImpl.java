package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.dto.AddOrEditAccountDTO;
import com.revature.model.Account;
import com.revature.model.Client;
import com.revature.util.ConnectionUtility;

public class AccountDAOImpl implements AccountDAO {

	@Override
	public List<Account> getAllAccountsFromClient(int clientId) throws SQLException {
		try(Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();
			
			String sql = "SELECT * FROM jdbc_demo.account p WHERE p.client_id = ?";
			
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			
			ResultSet rs = pstmt.executeQuery();
			
			while (rs.next()) {
				int id = rs.getInt("id");
				String name = rs.getString("name");
				int balance = rs.getInt("balance");
				
				
				Account p = new Account(id, name, balance, clientId);
				accounts.add(p);
			}
			
			return accounts;
		}
	}
	
	@Override
	public List<Account> getAccountsBetween(int clientId, int lessThan, int greaterThan) throws SQLException {
		try(Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();
			
			String sql = "SELECT * FROM jdbc_demo.account p WHERE p.client_id = ? AND p.balance <= ? AND p.balance >= ?" ;
			
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, lessThan);
			pstmt.setInt(3, greaterThan);
			
			ResultSet rs = pstmt.executeQuery();
			
			while (rs.next()) {
				int id = rs.getInt("id");
				String name = rs.getString("name");
				int balance = rs.getInt("balance");
				
				
				Account p = new Account(id, name, balance, clientId);
				accounts.add(p);
			}
			
			return accounts;
		}
	}

	@Override
	public List<Account> getAccountsLessThan(int clientId, int lessThan) throws SQLException {
		try(Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();
			
			String sql = "SELECT * FROM jdbc_demo.account p WHERE p.client_id = ? AND p.balance <= ?";
			
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, lessThan);
			
			ResultSet rs = pstmt.executeQuery();
			
			while (rs.next()) {
				int id = rs.getInt("id");
				String name = rs.getString("name");
				int balance = rs.getInt("balance");
				
				
				Account p = new Account(id, name, balance, clientId);
				accounts.add(p);
			}
			
			return accounts;
		}
	}

	@Override
	public List<Account> getAccountsGreaterThan(int clientId, int greaterThan) throws SQLException {
		try(Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();
			
			String sql = "SELECT * FROM jdbc_demo.account p WHERE p.client_id = ? AND p.balance >= ?";
			
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, greaterThan);
			
			ResultSet rs = pstmt.executeQuery();
			
			while (rs.next()) {
				int id = rs.getInt("id");
				String name = rs.getString("name");
				int balance = rs.getInt("balance");
				
				
				Account p = new Account(id, name, balance, clientId);
				accounts.add(p);
			}
			
			return accounts;
		}
	}

	@Override
	public Account addAccount(AddOrEditAccountDTO account) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "INSERT INTO jdbc_demo.account (name, balance, client_id) VALUES (?, ?, ?)";
			PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			
			pstmt.setString(1, account.getName());
			pstmt.setInt(2, account.getBalance());
			pstmt.setInt(3, account.getClientId());
			
			int recordsUpdated = pstmt.executeUpdate(); 
			
			if (recordsUpdated != 1) {
				throw new SQLException("Could not insert a account record");
			}
			
			
			ResultSet generatedKeys = pstmt.getGeneratedKeys();
			if (generatedKeys.next()) {
				Account createdAccount = new Account(generatedKeys.getInt(1), account.getName(), account.getBalance(), account.getClientId());
				
				return createdAccount;
			} else {
				throw new SQLException("Autogenerated id could not be obtained for Account");
			}
			
		}
	}

	@Override
	public Account editAccount(int clientId, int accountId, AddOrEditAccountDTO account) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "UPDATE jdbc_demo.account p SET name = ?, balance = ? WHERE p.client_id = ? AND p.id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setString(1, account.getName());
			pstmt.setInt(2, account.getBalance());
			pstmt.setInt(3, clientId);
			pstmt.setInt(4, accountId);
			
			int recordsUpdated = pstmt.executeUpdate();
			if (recordsUpdated != 1) {
				throw new SQLException("Record was not able to be updated");
			}
			
			return new Account(accountId, account.getName(), account.getBalance(), clientId);
		}
	}

	@Override
	public void deleteAccount(int clientId, int accountId) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "DELETE FROM jdbc_demo.account WHERE client_id = ? AND id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, accountId);
			
			int recordsDeleted = pstmt.executeUpdate();
			
			
			if (recordsDeleted != 1) {
				throw new SQLException("Record was not able to be deleted");
			}
		}
		
	}
	

	@Override
	public Account getAccountById(int clientId, int accountId) throws SQLException {
		try(Connection con = ConnectionUtility.getConnection()) {
			
			String sql = "SELECT * FROM jdbc_demo.account p WHERE p.client_id = ? AND p.id = ?";
			
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, accountId);
			
			ResultSet rs = pstmt.executeQuery();
			
			if (rs.next()) {
				int id = rs.getInt("id");
				String name = rs.getString("name");
				int balance = rs.getInt("balance");
				int client_Id = rs.getInt("client_id");
				
				Account account = new Account(id, name, balance, client_Id);
				
				return account;
			} else {
				return null;
			}
			
		}
	}

}
